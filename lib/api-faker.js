// Generated by CoffeeScript 1.6.3
var ApiFaker, CorsSupport, SslSupport, express, fs, protagonist, walker;

fs = require('fs');
protagonist = require('protagonist');
express = require('express');
walker = require('./walker');
SslSupport = require('./ssl-support');
CorsSupport = require('./cors-support');

ApiFaker = (function () {
  function ApiFaker(config) {
    var corsSupport, sslSupport;
    if (config['protagonist']) {
      protagonist = config['protagonist'];
    }
    if (config['express']) {
      express = config['express'];
    }
    if (config['blueprintPath']) {
      this.blueprintPath = config['blueprintPath'];
    }
    if (this.blueprintPath == null) {
      throw new Error("No blueprint path provided.");
    }
    this.configuration = config;
    this.app = express();
    if (this.configuration.options['ssl-enable']) {
      sslSupport = new SslSupport(this.app, {
        port: this.configuration.options['ssl-port'],
        host: this.configuration.options['ssl-host'],
        cert: this.configuration.options['ssl-cert'],
        key: this.configuration.options['ssl-key']
      });
    }
    if (!this.configuration.options['cors-disable']) {
      corsSupport = new CorsSupport(this.app);
    }
  }



  ApiFaker.prototype.run = function () {
    var app, ast_json, data, e,
      _this = this;
    app = this.app;
    var dirname = this.blueprintPath;
    try {
      //data = fs.readFileSync(this.blueprintPath, 'utf8');
      //TODO
      fs.readdir(dirname, function (err, filenames) {
        if (err) {
          throw err;
        }
        var resourceGroups = [];
        filenames.forEach(function (filename) {
          fs.readFile(dirname + filename, 'utf-8', function (err, content) {
            if (err) {
              throw err;
            }
            protagonist.parse(content, {
              type: "ast"
            }, function (error, result) {
              var _ref, _ref1;
              if (error != null) {
                throw error;
              }
              var ast_json = result.ast;
              resourceGroups.push(ast_json['resourceGroups'][0])

              if (resourceGroups.length === 2) {
                try {
                  walker(app, resourceGroups);
                } catch (_error) {
                  error = _error;
                  throw error;
                }
                try {
                  return app.listen(((_ref = _this.configuration) != null ? (_ref1 = _ref.options) != null ? _ref1.port : void 0 : void 0) != null ? _this.configuration.options.port : 3000);
                } catch (_error) {
                  error = _error;
                }
              }
            });
          });
        });
      });
    } catch (_error) {
      e = _error;
      throw e;
    }
  };

  return ApiFaker;

})();

module.exports = ApiFaker;



